{"version":3,"sources":["../backend/util.js"],"names":["getToken","user","jwt","sign","_id","id","name","email","isAdmin","rePassword","description","config","JWT_SECRET","expiresIn","isAuth","req","res","next","token","headers","authorization","onlyToken","slice","length","verify","err","decode","status","send","msg"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD,EAAU;AACvB,SAAOC,yBAAIC,IAAJ,CAAS;AACZC,IAAAA,GAAG,EAAEH,IAAI,CAACI,EADE;AAEZC,IAAAA,IAAI,EAAEL,IAAI,CAACK,IAFC;AAGZC,IAAAA,KAAK,EAAEN,IAAI,CAACM,KAHA;AAIZC,IAAAA,OAAO,EAAEP,IAAI,CAACO,OAJF;AAKZC,IAAAA,UAAU,EAAER,IAAI,CAACQ,UALL;AAMZC,IAAAA,WAAW,EAAET,IAAI,CAACS;AANN,GAAT,EAQJC,mBAAOC,UARH,EAQe;AAClBC,IAAAA,SAAS,EAAE;AADO,GARf,CAAP;AAWH,CAZD;;;;AAeA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/B,MAAMC,KAAK,GAAGH,GAAG,CAACI,OAAJ,CAAYC,aAA1B;;AACA,MAAGF,KAAH,EAAU;AACN,QAAMG,SAAS,GAAGH,KAAK,CAACI,KAAN,CAAY,CAAZ,EAAeJ,KAAK,CAACK,MAArB,CAAlB;;AACArB,6BAAIsB,MAAJ,CAAWH,SAAX,EAAsBV,mBAAOC,UAA7B,EAAyC,UAACa,GAAD,EAAMC,MAAN,EAAiB;AACtD,UAAGD,GAAH,EAAO;AACH,eAAOT,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,UAAAA,GAAG,EAAE;AAAN,SAArB,CAAP;AACH;;AACDd,MAAAA,GAAG,CAACd,IAAJ,GAAWyB,MAAX;AACA,aAAOT,IAAI,EAAX;AACH,KAND;AAOH,GATD,MASM;AACF,WAAOD,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,GAAG,EAAE;AAAN,KAArB,CAAP;AACH;AACJ,CAdD;;;;AAgBA,IAAMrB,OAAO,GAAG,SAAVA,OAAU,CAACO,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAChC,MAAGF,GAAG,CAACd,IAAJ,IAAYc,GAAG,CAACd,IAAJ,CAASO,OAAxB,EAAiC;AAC7B,WAAOS,IAAI,EAAX;AACH;;AACD,SAAOD,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,IAAAA,GAAG,EAAC;AAAL,GAArB,CAAP;AACH,CALD","sourcesContent":["import jwt from \"jsonwebtoken\"\r\nimport config from \"./config\"\r\n\r\nconst getToken = (user) => {\r\n    return jwt.sign({\r\n        _id: user.id,\r\n        name: user.name,\r\n        email: user.email,\r\n        isAdmin: user.isAdmin,\r\n        rePassword: user.rePassword,\r\n        description: user.description\r\n\r\n    }, config.JWT_SECRET, { \r\n        expiresIn: \"48h\"\r\n    });\r\n}\r\n\r\n\r\nconst isAuth = (req, res, next) => {\r\n    const token = req.headers.authorization;\r\n    if(token) {\r\n        const onlyToken = token.slice(7, token.length);\r\n        jwt.verify(onlyToken, config.JWT_SECRET, (err, decode) => {\r\n            if(err){\r\n                return res.status(401).send({msg: \"invalid token\"});\r\n            }\r\n            req.user = decode;\r\n            return next();\r\n        });\r\n    } else{\r\n        return res.status(401).send({msg: \"Token is not supplied\"});\r\n    }\r\n}\r\n\r\nconst isAdmin = (req, res, next) => {\r\n    if(req.user && req.user.isAdmin) {\r\n        return next();\r\n    }\r\n    return res.status(401).send({msg:\"Admin Token is not valid\"})\r\n}\r\n\r\nexport { getToken, isAuth, isAdmin } ;"],"file":"util.js"}